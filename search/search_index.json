{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OPNsense Resources","text":"<p>Threat Patrols loves OPNsense\u00ae and we are happy to support the ecosystem with resources for the OPNsense community.</p>"},{"location":"#opnsense-plugins","title":"OPNsense Plugins","text":"<p>Threat Patrols produces plugins for OPNsense that can be installed from the Threat Patrols repo to  your OPNsense instance with minimum fuss - </p> <ul> <li>Autossh: plugins/autossh</li> <li>Configuration Sync: plugins/configsync</li> </ul>"},{"location":"#opnsense-mirror","title":"OPNsense Mirror","text":"<p>Threat Patrols provides a public OPNsense mirror through Cloudflare - </p> <ul> <li>OPNsense mirror: mirror</li> </ul> <p>Learn more about the awesomeness of the OPNsense platform and discover the team-of-heroes that produce  OPNsense from their web directly -</p> <ul> <li>https://opnsense.org/about/about-opnsense/</li> </ul> <p>Info</p> <p>OPNsense\u00ae is a trademark of the very awesome Deciso B.V. company.</p>"},{"location":"mirror/","title":"OPNsense Mirror","text":"<p>The Threat Patrols mirror is a Cloudflare worker that uses object caching at Cloudflare.  This means the first  file-object request fills our Cloudflare cache from origin, and subsequent requests are then served directly  from a Cloudflare CDN near you.</p>"},{"location":"mirror/#setup","title":"Setup","text":"<ul> <li>Navigate to the Firmware settings on your OPNsense instance (System -&gt; Firmware -&gt; Settings)</li> <li> <p>Choose (other) in the Mirror dropdown, and enter the Threat Patrols mirror URL</p> <pre><code>https://mirror.threatpatrols.com/opnsense/\n</code></pre> </li> </ul> <p> </p> <p></p>"},{"location":"mirror/#status-monitoring","title":"Status Monitoring","text":"<p>We care about the uptime and reliability of our systems and make it easy to monitor and review our  performance: </p> <ul> <li>status.threatpatrols.com</li> </ul>"},{"location":"plugins/aliassync/","title":"Alias Sync","text":"<p>Watch this space</p>"},{"location":"plugins/autossh/","title":"Autossh for OPNsense","text":"<p>The Autossh plugin for OPNsense is a wrapper around the autossh system-package that makes it possible to create persistent and reliable SSH based tunnels from  remote-to-local; local-to-remote; or dynamic SOCKS5-based forward.  All tunneled  within the safety and security of a standard SSH connection.</p> <p>SSH port forwarding (and by extension Autossh) can be used to solve a wide range  of network-service access challenges by using TCP port-forwards that are possible without the fussiness of setting up VPN-servers and VPN-clients.  If you are able to establish an SSH connection to a remote site then you should be able to create  an ssh port-tunneling solution.</p> <p>For example:</p> <ul> <li>Provide reverse-remote access to OPNsense-sites that have no public IP address    available, as is common with ISPs using super-NAT to provision customers.</li> <li>Provide redundant multipath reverse-remote access to OPNsense-sites via individual    external routes through the use of ssh-tunnel interface binding.</li> <li>Create trusted (SOCKS-based) gateways for OPNsense-sites requiring access to   remote-networks, eg customer-network(s) or cloud-VPC-network(s).</li> <li>Create your own internet privacy VPN setup for OPNsense-site local network    users using a SOCKS proxy (ie Dynamic-Forward) to a (temporary) cloud instance.</li> <li>Provide local network access for just-about-any remote TCP-based service such    as HTTP-servers, RDP desktops, SMTP relays or other SSH servers.</li> <li>Provide all of the above in reverse, allowing remote networks the same ability    to access local TCP-services.</li> </ul> <p>Many SSH-tunnel based recipes and solutions are possible, check your favorite  search-engine results for \"ssh port forwarding\".</p>"},{"location":"plugins/autossh/#installation","title":"Installation","text":"<p>Installation from the Threat Patrols package repository is possible using the standard OPNsense Firmware-Plugin web-interface after the <code>os-threatpatrols</code> plugin has been added to your system.</p> <ul> <li>Package Repository: repo</li> </ul>"},{"location":"plugins/autossh/#keys","title":"Keys","text":"<p>Before creating an SSH-tunnel you need to create an SSH-key from the Autossh -&gt; Settings -&gt; Keys tab.</p> <p></p> <p>Create a key by pressing the + symbol next to the rubbish-bin symbol on the bottom right-hand-side of  the Autossh -&gt; Settings -&gt; Keys tab.</p> <p>Provide a name for the key and choose a desired ssh key-type if something other than the default <code>Ed25519</code> is required.</p> <p>The description field is a free-form text field that is not otherwise parsed.</p> <p>The fingerprint value is available after generating the SSH key.</p>"},{"location":"plugins/autossh/#ssh-private-key","title":"SSH Private Key","text":"<p>SSH keys are created within the OPNsense system itself and stored (base64 encoded) in the  OPNsense configuration <code>.xml</code> file.  There is no way to import user self generated SSH-key  material.</p> <p>Note</p> <p>Preventing the use of user-supplied keys is a deliberate-decision to prevent users mistakenly using keys that are also used for other purposes.</p>"},{"location":"plugins/autossh/#ssh-public-key","title":"SSH Public Key","text":"<p>The SSH Public key is available by pressing the key-shaped icon under \"Commands\" in  the Autossh-&gt;Settings-&gt;Keys tab.</p> <p></p> <p>The SSH-public key is generated with a prefix that impose restrictions on the ability  to of this SSH-key to invoke a terminal-shell; forward any kind of ssh-agent from  OPNsense (should not exist anyway); or forward remote X-sessions (also not expected  to exist)</p> <p>The SSH-public key prefix that implements these restrictions looks like this:</p> <pre><code>command=\"\",no-agent-forwarding,no-pty,no-user-rc,no-X11-forwarding\n</code></pre> <p>This limits SSH-connections to port-tunneling purposes only and means the  private-key cannot be misused to gain shell access on the remote system.</p> <p>Additionally, the SSH-public key is suffixed with the <code>autossh_key_id:</code> value  that helps identify the same key in the OPNsense system.</p> <p>The entire SSH-public key value should be cut-n-paste from the OPNsense  user-interface to the remote system <code>.ssh/authorized_keys</code> file.</p> <p>It is recommended that you use a dedicated service-account at the SSH-server  for the purpose of operating your SSH-tunnels.  If this is not possible for  some reason, then recall that SSH allows users to define more than one ssh-key  in their <code>.ssh/authorized_keys</code> file and therefore allows you to continue  using any existing keys(s) while adding another ssh-public key for this  tunneling purpose.</p>"},{"location":"plugins/autossh/#tunnels","title":"Tunnels","text":"<p>Tip</p> <p>Create an SSH-key before attempting to create an SSH-tunnel, else your SSH-connection  will not have any available keys to select and choose from.</p> <p>Create a new tunnel by pressing the + symbol next to the rubbish-bin symbol on  the bottom right-hand-side of the Autossh-&gt;Settings-&gt;Tunnels tab.</p> <p>Each option in the add SSH-tunnel setup-form provides in-line help that describes the  field (press the i icon).</p> <p>Additionally, the in-line help also references the underlying <code>ssh_config</code> item that can be referenced for more technical-detail when required.  Refer to the OpenSSH  manual for the related item - https://man.openbsd.org/ssh_config</p> <p>Most SSH-tunnel connections can be created with a minimum setup of:</p> <ul> <li><code>User</code>: username at the remote SSH-server where the SSH-public key has been added to <code>.ssh/authorized_keys</code></li> <li><code>Hostname</code>: the hostname (or IP address) of the remote SSH-server</li> <li><code>SSH key name</code>: the name of the SSH-key previously created.</li> <li>Any of <code>Local Forward</code>, <code>Remote Forward</code> or <code>Dynamic Forward</code> for the tunnels themselves</li> </ul> <p>Also pay attention to the <code>Bind Interface</code> since this is the interface used by  autossh to create the SSH connection.  If the primary-address on  the <code>Bind Interface</code> does not have a route to the <code>Hostname</code> the connection  will not be possible.</p> <p>Create the tunnel by pressing the \"Save\" button.</p> <p>Attention</p> <p>New tunnels do not automatically start until the user navigates to Connection Status  and manually starts the connection.  However, once a tunnel has been started it will always  work to auto-reconnect while the tunnel <code>Enabled</code> setting is set as true.</p> <p>See the Examples section for examples in setting up common situations and scenarios.</p>"},{"location":"plugins/autossh/#connection-status","title":"Connection Status","text":"<p>The Connection Status view provides the ability to Start/Stop connections and provides a view of the SSH-connection status.</p> <p></p> <p>The Status column provides:</p> <ul> <li>Enabled: defines the SSH-tunnel status</li> <li>Uptime: total time the current SSH-connection has been up without failure. </li> <li>Fails: the count of ssh-connection failures for this ssh-tunnel since system start.</li> <li>Healthy: time since the last loopback health check was tested and successful.  New     connections report \"pending\" status until the first health-check (60 second interval).</li> </ul> <p>The Healthy signal is derived from a feature of autossh that tests if a TCP connection is possible when passed through a loopback arrangement that consists of a port-forward  to the remote-server with a port-remote that returns the same TCP connection back to the autossh process - hence the loopback.</p> <p>The health-check occurs every 60 seconds and unhealthy connections are terminated and  automatically recreated - this increments the \"Fails\" count.  </p> <p>Because connection health checks occur every 60 seconds, you may observe connections in a \"pending\" state until the first health-check completes.  The ssh-tunnel may already  be up and operational before the healthy signal.</p>"},{"location":"plugins/autossh/#examples","title":"Examples","text":""},{"location":"plugins/autossh/#local-socks-proxy","title":"Local SOCKS proxy","text":"<p>Scenario: provide OPNsense-site local-network users with a SOCKS proxy on the OPNsense instance that can be used by local-network users to access network resources as if they are from the remote-ssh host.</p> <ul> <li>Create an Autossh ssh-tunnel to a remote ssh-server</li> <li>Define an Autossh <code>Dynamic Forward</code> with <code>*:1080</code> for this ssh-tunnel</li> <li>Check your firewall rules permit local network connections to TCP1080 on the firewall</li> <li>Configure your local-network users to use the SOCKS proxy, for example in the Firefox    web-browser navigate Settings-&gt;General-&gt;Network Settings and define a SOCKS Host    with the local-network IP address of your OPNsense instance and TCP1080. </li> </ul> <p>Danger</p> <p>Make sure you do not accidentally create an open public-proxy if using a  Dynamic Forward definition with <code>*:1080</code></p> <p>Either create appropriate firewall rules that prevent unwanted access to TCP1080 or adjust the <code>Dynamic Forward</code> definition to the local-network address that you wish  to make the SOCKS proxy available from - ideally do both.</p>"},{"location":"plugins/autossh/#reverse-remote-access","title":"Reverse remote access","text":"<p>Scenario: OPNsense-site location receives external network connectivity via an ISP that uses Super-NATs (or carrier-grade NAT) such that the ISP customer does not have any  access to a public IP address.</p> <ul> <li>Establish an ssh-server in a network where you have access (eg, hosted server) </li> <li>Create an Autossh ssh-tunnel that connects to this remote ssh-server</li> <li>Define an Autossh <code>Remote Forward</code> with <code>127.0.0.1:2222 127.0.0.1:22</code> for this ssh-tunnel</li> <li>SSH to the remote ssh-server and then from there ssh to 127.0.0.1:2222 which will    tunnel back to the OPNsense host on TCP22 - consider setting this up using a     client-side <code>ProxyJump</code> definition to save the manual effort of ssh'ing to the first    ssh-server and then again to 127.0.0.1:2222</li> </ul>"},{"location":"plugins/autossh/#local-smtp-relay","title":"Local SMTP relay","text":"<p>Scenario: local network users require access to an SMTP that is only available in a network that exists behind an ssh-server.</p> <ul> <li>Create an Autossh ssh-tunnel to a remote ssh-server</li> <li>Define an Autossh <code>Local Forward</code> with <code>*:25</code> for this ssh-tunnel</li> <li>Check your firewall rules permit local network connections to TCP25 on the firewall</li> <li>Configure your local-network users to use the SMTP that now appears as if exists     from the local-network IP address of your OPNsense instance.</li> </ul> <p>Danger</p> <p>Make sure you do not accidentally create an open smtp-relay if using a  Local Forward definition with <code>*:25</code></p>"},{"location":"plugins/autossh/#issues","title":"Issues","text":"<p>Please post issues via Github:</p> <ul> <li>github.com/threatpatrols/opnsense-plugin-autossh/issues </li> </ul>"},{"location":"plugins/autossh/#source","title":"Source","text":"<ul> <li>github.com/threatpatrols/opnsense-plugin-autossh</li> </ul>"},{"location":"plugins/autossh/#copyright","title":"Copyright","text":"<ul> <li>All rights reserved.</li> <li>Copyright \u00a9 2022-2025 Threat Patrols Pty Ltd &lt;contact@threatpatrols.com&gt;</li> <li>Copyright \u00a9 2018 Nicholas de Jong &lt;me@nicholasdejong.com&gt;</li> </ul>"},{"location":"plugins/autossh/#license","title":"License","text":"<ul> <li>BSD-2-Clause - see LICENSE file for full details.</li> </ul>"},{"location":"plugins/cloudflared/","title":"Cloudflared Tunnel","text":"<p>Watch this space</p>"},{"location":"plugins/configsync/","title":"Configuration Sync (configsync) for OPNsense","text":"<p>Configuration Sync (configsync) is an OPNsense plugin designed to one-way  synchronize the OPNsense system configuration <code>.xml</code> files to an (S3 compatible)  cloud-storage provider.  Actions for <code>configsync</code> are automatically triggered  by an OPNsense syshook-config event.</p> <p>Configuration Sync is well-suited to DevOps automation situations where OPNsense instances are re-invoked with a previously existing configuration - such as when  using MultiCLOUDsense to handle the bootstrapping of an OPNsense cloud instance.</p> <p>Configuration Sync also happens to be a great OPNsense configuration backup solution  when used by itself.</p> <p>Configuration Sync supports the following cloud storage providers:-</p> <ul> <li>Amazon Web Services - S3</li> <li>Google - Cloud Storage</li> <li>Digital Ocean - Spaces</li> <li>Other - S3 compatible endpoints</li> </ul> <p>Configuration Sync uses the well known Python Boto3  library to achieve generic S3 connectivity; if Boto3 can handle the S3 storage provider  you should be able to use it here.</p>"},{"location":"plugins/configsync/#installation","title":"Installation","text":"<p>Installation from the Threat Patrols package repository is possible using the standard OPNsense Firmware-Plugin web-interface after the <code>os-threatpatrols</code> plugin has been added to your system.</p> <ul> <li>Package Repository: repo</li> </ul>"},{"location":"plugins/configsync/#general-settings-recommendations","title":"General Settings Recommendations","text":"<ul> <li>Storage Path - recommend that you use different storage paths per OPNsense     instance else you will end up with configuration files from multiple OPNsense     instances in the same S3 storage path that will clobber the <code>config-current.xml</code>    of one another.  If this does occur, it is possible to examine the S3-object    meta-data attributes that are added by ConfigSync to determine which files belong    to each OPNsense instance.</li> <li>API Key / API Secret Credentials - strongly recommend that you use a dedicated     service-account with an access policy that constrains the service-account to permissions    allowing <code>list-bucket</code> and <code>put-bucket</code> actions (or the storage-provider equivalent     of these).  The Configuration Sync tool is designed to not require any <code>get-object</code>     or other object-read access which in-turn greatly limits risks associated with these     API credentials, if this restrictive service-account policy is applied.</li> </ul>"},{"location":"plugins/configsync/#storage-provider-settings","title":"Storage Provider Settings","text":""},{"location":"plugins/configsync/#aws-s3","title":"AWS - S3","text":"<ul> <li>Endpoint URL Override - generally not required for AWS-S3 since the URL endpoint    for AWS-S3 is self-determined using their virtual-hosted\u2013style     bucket access that uses a CNAME arrangement to direct requests to the correct AWS     region for your bucket.</li> <li> <p>Example IAM Policy - the AWS IAM policy below describes the minimum permissions    policy required by a ConfigSync service account. </p> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [ \"s3:ListBucket\" ],\n            \"Resource\": [ \"arn:aws:s3:::BUCKET_NAME\" ]\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [ \"s3:ListBucket\", \"s3:PutObject\" ],\n            \"Resource\": [ \"arn:aws:s3:::BUCKET_NAME/PATH_NAME/*\" ]\n        }\n    ]\n}\n</code></pre> <p>Note</p> <p>Be sure to replace the <code>BUCKET_NAME</code> and <code>PATH_NAME</code> values with your own values  if you plan to cut-n-paste from above.</p> </li> </ul>"},{"location":"plugins/configsync/#google-cloud-storage","title":"Google - Cloud Storage","text":"<ul> <li>Endpoint URL Override - is not required for Google Cloud storage.</li> <li>API Key / API Secret Credentials - Google requires the creation of S3 compatible      HMAC keys.</li> <li>Creating HMAC credentials in brief<ul> <li>Step-1) create a service account with restrictions allowing object-list and object-write   to your bucket, do not create any keys or other credentials for the service-account yet.</li> <li>Step-2) navigate to your Google Storage bucket, select Settings &gt; Interoperability then    the \"Create a key for another service account\" button.</li> <li>Step 3) check the credentials using the Configuration Sync settings interface using   the \"Test Credentials\" button</li> </ul> </li> </ul>"},{"location":"plugins/configsync/#digital-ocean-spaces","title":"Digital Ocean - Spaces","text":"<ul> <li>Endpoint URL Override - is required for Digital Ocean and should be specified in the     form <code>https://&lt;region&gt;.digitaloceanspaces.com</code> for example use <code>https://sgp1.digitaloceanspaces.com</code> for      Singapore.</li> <li> <p>API Key / API Secret Credentials - Digital Ocean provides S3 compatible credentials     out-of-the-box that are accessed by navigating API &gt; Tokens/Keys &gt; Spaces access keys</p> <p>Attention</p> <p>Digital Ocean does not currently provide the same type of service-accounts or access  policies that are possible with Google, AWS and others.  You may need to consider if  this type of unrestricted bucket-access is appropriate for your use case.</p> </li> </ul>"},{"location":"plugins/configsync/#other-s3-compatible","title":"Other - S3 compatible","text":"<ul> <li>Configuration Sync has been tested with and is known to work with MinIO. </li> <li>Endpoint URL Override - for example <code>http://192.168.100.252:9000</code>  NB: the risks with     clear text http in this example URL; MinIO can (and should) be deployed on https.</li> <li>API Key / API Secret Credentials - A service-account with a policy similar to the AWS     example works well.</li> <li>The ability to create service-accounts and apply restrictive policies makes MinIO     an appealing self-hosted option.</li> </ul>"},{"location":"plugins/configsync/#storage-metadata","title":"Storage Metadata","text":"<p>Each OPNsense <code>.xml</code> file object written by Configuration Sync adds extra meta-data to the  stored file-object that helps confirm the OPNsense instance the file originated from.</p> <p>These fields are</p> <ul> <li><code>filetype</code> - always \"opnsense-config\"</li> <li><code>mtime</code> - the last modified timestamp of the OPNsense config file</li> <li><code>bytes</code> - the file size in bytes of the OPNsense config file</li> <li><code>md5</code> - the md5-digest of the OPNsense config file</li> <li><code>hostid</code> - the unique host-id of the OPNsense system</li> <li><code>hostname</code> - the hostname of the OPNsense system</li> </ul> <p></p> <p>These values are helpful in filtering and selecting specific configuration files from the  storage-provider bucket at a later time.</p> <p>(Don't worry the observable attributes in the screenshot are not real)</p>"},{"location":"plugins/configsync/#issues","title":"Issues","text":"<p>Please post issues via Github:</p> <ul> <li>github.com/threatpatrols/opnsense-plugin-configsync/issues </li> </ul>"},{"location":"plugins/configsync/#source","title":"Source","text":"<ul> <li>github.com/threatpatrols/opnsense-plugin-configsync</li> </ul>"},{"location":"plugins/configsync/#copyright","title":"Copyright","text":"<ul> <li>All rights reserved.</li> <li>Copyright \u00a9 2022-2025 Threat Patrols Pty Ltd &lt;contact@threatpatrols.com&gt;</li> <li>Copyright \u00a9 2018 Nicholas de Jong &lt;me@nicholasdejong.com&gt;</li> </ul>"},{"location":"plugins/configsync/#license","title":"License","text":"<ul> <li>BSD-2-Clause - see LICENSE file for full details.</li> </ul>"},{"location":"repo/","title":"Threat Patrols Repo for OPNsense packages","text":"<p>Threat Patrols operates a repository for OPNsense packages signed by Threat Patrols  that allow you to easily install our packages and plugins.</p> <p>Info</p> <p>The Threat Patrols package repo is delivered via Cloudflare CDN from https://repo.threatpatrols.com</p>"},{"location":"repo/#install","title":"Install","text":"<p>Add the Threat Patrols package repository to your OPNsense instance by installing  the <code>os-threatpatrols</code> plugin from the OPNsense instance terminal.</p> <p>If you decide later that you'd like to remove the Threat Patrols package repo, you can  simply remove the plugin using the regular OPNsense web-interface.</p> <p>Use the following command (as root) to install the <code>os-threatpatrols</code> plugin</p>"},{"location":"repo/#opnsense-251","title":"OPNsense 25.1","text":"<pre><code>pkg-static add \\\n  \"https://repo.threatpatrols.com/opnsense/FreeBSD:14:amd64/25.1/stable/Latest/os-threatpatrols.pkg\"\n</code></pre> Sample command output (click to expand) <p>You should see output similar to this</p> <pre><code>root@OPNsense:~ #\nroot@OPNsense:~ # pkg-static add \"https://repo.threatpatrols.com/opnsense/FreeB\nFetching os-threatpatrols.pkg: 100%    5 KiB   4.9kB/s    00:01\nInstalling os-threatpatrols-1.0.33...\nExtracting os-threatpatrols-1.0.33: 100%\nUpdating OPNsense repository catalogue...\nFetching meta.conf: 100%    163 B   0.2kB/s    00:01\nFetching packagesite.pkg: 100%  248 KiB 253.6kB/s    00:01\nProcessing entries: 100%\nOPNsense repository update completed. 868 packages processed.\nUpdating ThreatPatrols repository catalogue...\nFetching meta.conf: 100%    104 B   0.1kB/s    00:01\nFetching packagesite.pkg: 100%    3 KiB   3.1kB/s    00:01\nProcessing entries: 100%\nThreatPatrols repository update completed. 3 packages processed.\nAll repositories are up to date.\nOK\nOK\nConfiguring system logging...done.\nStopping configd...done\nStarting configd.\nroot@OPNsense:~ #\n</code></pre>"},{"location":"repo/#opnsense-247-to-211","title":"OPNsense 24.7 to 21.1","text":"<p>Earlier OPNsense versions are possible by adjusting the source URL to suit, for example OPNsense23.1 <pre><code>pkg-static add \\\n  \"https://repo.threatpatrols.com/opnsense/FreeBSD:13:amd64/23.1/stable/Latest/os-threatpatrols.pkg\"\n</code></pre></p> <p>Note that OPNsense 21.1 and 21.7 are based on FreeBSD:12 so if you still require these older (and now unsupported) versions that you'll need to adjust the <code>FreeBSD:13:amd64</code> portion of the URL to suit as well.</p>"},{"location":"repo/#plugins-installed-example","title":"Plugins installed example","text":""},{"location":"repo/#release-streams","title":"Release Streams","text":"<p>It is possible to switch ThreatPatrols release streams from the terminal with  the following commands.</p>"},{"location":"repo/#stable","title":"Stable","text":"<pre><code>configctl threatpatrols repo use_stable\n</code></pre> Sample command output (click to expand) <p>Only if there is a change in the ThreatPatrols repo being used will an update occur, as shown below -</p> <pre><code>root@OPNsense:~ # configctl threatpatrols repo use_stable\nUpdating OPNsense repository catalogue...\nFetching meta.conf: . done\nFetching packagesite.pkg: .......... done\nProcessing entries: .......... done\nOPNsense repository update completed. 798 packages processed.\nUpdating ThreatPatrols repository catalogue...\nFetching meta.conf: . done\nFetching packagesite.pkg: . done\nProcessing entries: . done\nThreatPatrols repository update completed. 4 packages processed.\nAll repositories are up to date.\nroot@OPNsense:~ #\n</code></pre>"},{"location":"repo/#testing","title":"Testing","text":"<p>Only use the testing release stream if you are comfortable in dealing with occasional issues and are willing to report those issues via the related Github issues channel. <pre><code>configctl threatpatrols repo use_testing\n</code></pre></p>"},{"location":"repo/#develop","title":"Develop","text":"<p>Caution</p> <p>A release-stream for <code>ThreatPatrolsDevelop</code> exists via the <code>use_develop</code>  argument, however it is not recommended and is subject to regular change,  breakage and failure.</p>"},{"location":"repo/#remove","title":"Remove","text":"<p>You can easily remove the Threat Patrols package repo from your OPNsense system by uninstalling the <code>os-threatpatrols</code> via the regular OPNsense web-interface  via System -&gt; Firmware -&gt; Plugins menu.</p> <p>Alternatively, you can remove using from a (root) terminal prompt <pre><code>pkg remove os-threatpatrols\n</code></pre></p> Sample command output (click to expand) <p>You should see output similar to this</p> <pre><code>root@OPNsense:~ # pkg remove os-threatpatrols\nChecking integrity... done (0 conflicting)\nDeinstallation has been requested for the following 1 packages (of 0 packages in the universe):\n\nInstalled packages to be REMOVED:\n        os-threatpatrols: 1.0.20\n\nNumber of packages to be removed: 1\n\nProceed with deinstalling packages? [y/N]: y\n[1/1] Deinstalling os-threatpatrols-1.0.20...\n[1/1] Deleting files for os-threatpatrols-1.0.20: 100%\nroot@OPNsense:~ #\n</code></pre> <p>Note</p> <p>When you remove <code>os-threatpatrols</code> you are removing the system information that tells  OPNsense where the Threat Patrols repo is.  If you have Threat Patrols plugins installed  when you remove <code>os-threatpatrols</code> then those remaining packages and plugins will appear  as \"orphans\" since they no longer know which repo they belong to.</p>"},{"location":"repo/#repo-status-monitoring","title":"Repo Status Monitoring","text":"<p>Additional to being transparent about our system-uptime  we also closely monitor the packaging status across each of our release (Stable, Testing) for each supported  OPNsense release. </p> <ul> <li>Packages Status: status.threatpatrols.com/status/package-status</li> </ul>"},{"location":"repo/#signing-key-fingerprints","title":"Signing Key Fingerprints","text":"<p>Threat Patrols makes our key-fingerprints of the package signing keys available through our  repo</p> <ul> <li>Signing Key Fingerprints: repo.threatpatrols.com/keys/</li> </ul> <p>When you install the Threat Patrols repo-plugin <code>os-threatpatrols</code> you are adding our signing-key  fingerprints to your OPNsense host.  This mechanism ensures the packages you are installing  really come from us.</p> <p>Our signing key fingerprints are located on your OPNsense system in the path <pre><code>/usr/local/etc/pkg/fingerprints/ThreatPatrols/trusted\n</code></pre></p> <p>We supply 2x fingerprints to future-proof any situation where we decide to revoke our current packag signing key.</p> <ul> <li>Current package signing key: <code>repo.threatpatrols.com-opnsense_20220105b</code></li> </ul> <p>You may additionally observe a \"revoked\" key in our repo <code>repo.threatpatrols.com-opnsense_20220105a.fingerprint</code>  this key purely exists for testing to confirm the packaging tooling correctly rejects any  package signed by this key - it is not used for any other purpose.</p>"},{"location":"repo/#key-fingerprint-verification","title":"Key Fingerprint Verification","text":"<p>We GPG sign our <code>.fingerprint</code> files allowing you to independently confirm our fingerprints  are really from us.  We use the same GPG key  as per our <code>security.txt</code> to sign  these.</p> <p>Steps to confirm our <code>.fingerprint</code> files:</p> <p>Step 1) Acquire the Threat Patrols GPG public key - https://www.threatpatrols.com/.well-known/threatpatrols.pgp <pre><code>curl --silent 'https://www.threatpatrols.com/.well-known/threatpatrols.pgp' | gpg --import\n</code></pre> You may additionally observe our GPG key as being available via public-keyservers</p> <p>Step 2) Confirm GPG key-id <code>0x2C78E60FD912408F</code> for <code>security@threatpatrols.com</code> <pre><code>gpg --list-key 2C78E60FD912408F\n</code></pre></p> <p>You should observe a response that details our GPG key <pre><code>pub   rsa4096 2022-05-15 [SC] [expires: 2025-12-31]\n      B512FB731A4C61FB45E27C3C2C78E60FD912408F\nuid           [ unknown] Threat Patrols Security (20220515a) &lt;security@threatpatrols.com&gt;\nsub   rsa4096 2022-05-15 [E]\n</code></pre></p> <p>Step 3) Confirm the fingerprint file(s) <pre><code>wget 'https://repo.threatpatrols.com/keys/trusted/repo.threatpatrols.com-opnsense_20220105b.fingerprint'\nwget 'https://repo.threatpatrols.com/keys/trusted/repo.threatpatrols.com-opnsense_20220105b.fingerprint.sig'\ngpg --verify repo.threatpatrols.com-opnsense_20220105b.fingerprint.sig\n</code></pre></p> <p>You should observe a response that confirms <code>repo.threatpatrols.com-opnsense_20220105b.fingerprint</code> is signed by <code>0x2C78E60FD912408F</code> (the last 16x chars of the key-fingerprint) <pre><code>gpg: assuming signed data in 'repo.threatpatrols.com-opnsense_20220105b.fingerprint'\ngpg: Signature made Sat 23 Jul 2022 01:25:52 AM UTC\ngpg:                using RSA key B512FB731A4C61FB45E27C3C2C78E60FD912408F\ngpg:                issuer \"security@threatpatrols.com\"\ngpg: Good signature from \"Threat Patrols Security (20220515a) &lt;security@threatpatrols.com&gt;\" [unknown]\ngpg: WARNING: This key is not certified with a trusted signature!\ngpg:          There is no indication that the signature belongs to the owner.\nPrimary key fingerprint: B512 FB73 1A4C 61FB 45E2  7C3C 2C78 E60F D912 408F\n</code></pre></p>"},{"location":"repo/#issues","title":"Issues","text":"<p>Please post issues via Github:</p> <ul> <li>github.com/threatpatrols/opnsense-plugin-threatpatrols/issues </li> </ul>"},{"location":"repo/#source","title":"Source","text":"<ul> <li>github.com/threatpatrols/opnsense-plugin-threatpatrols</li> </ul>"},{"location":"repo/#copyright","title":"Copyright","text":"<ul> <li>All rights reserved.</li> <li>Copyright \u00a9 2022-2025 Threat Patrols Pty Ltd &lt;contact@threatpatrols.com&gt;</li> </ul>"},{"location":"repo/#license","title":"License","text":"<ul> <li>BSD-2-Clause - see LICENSE file for full details.</li> </ul>"}]}